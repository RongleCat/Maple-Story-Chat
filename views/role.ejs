<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>
        <%= title %>
    </title>
    <link rel="stylesheet" href="/css/role_01.css">
</head>

<body>
    <div id="app">
        <div class="canvas" @click="getFocus('jiaodian')">
            <div class="role-container" :class="[{filp:value.isfilp},stateClass(value.stateIndex)]" :style="{left:value.left+'px'}" v-for="(value, key, index) in users" :key="index">
                <div class="chatbox" v-if="value.chatIng">{{key}}：{{value.chatText}}</div>
                <div class="role-imgbox"></div>
                <div class="namebox">{{key}}</div>
            </div>
            <div class="chatInputBox" @click.stop="">
                <input type="text" id="chat" @keyup.13="chatEmit" v-model="inputText">
                <div class="emit-btn" @keyup.13="chatEmit">发送</div>
            </div>
            <input type="text" placeholder="输入昵称加入聊天室" id="join" v-model="userName" @keyup.13="addUser" v-if="!join" @click.stop="">
        </div>

        <input type="text" style="opacity:0" id="jiaodian" @keyup.13="getFocus('chat')" @keyup="stopMove" @keydown.up="changePos('up')" @keydown.down="changePos('down')" @keydown.left="changePos('left')" @keydown.right="changePos('right')">
    </div>
    <div class="tip">操作方法：向左走 ←，向右走 →，趴下 ↓，聊天框获取焦点 enter，点击中间画面重新人物操作焦点。</div>
    <script src="/js/socket.io.js"></script>
    <script src="http://cdnjs.cloudflare.com/ajax/libs/vue/2.1.3/vue.js"></script>
    <script>
        window.onload = function() {

            Vue.directive('focus', {
                inserted: function(el) {
                    el.focus()
                }
            })
            var app = new Vue({
                el: '#app',
                data() {
                    return {
                        users: {},
                        isfilp: false,
                        stateIndex: 0,
                        left: 20,
                        stateType: 0,
                        speed: 500,
                        rule: [0, 1, 2, 1],
                        timer: '',
                        keydown: false,
                        userName: '',
                        chatIng: false,
                        chatText: '',
                        join: false,
                        inputText: ''
                    }
                },
                computed: {

                },
                mounted() {
                    let that = this;
                    that.getFocus('join');
                    this.roleAnimation();
                    that.socket = io.connect('http://www.fmcat.top:3000');
                    that.socket.on('connect', function() {
                        console.log(that.socket.id);
                        that.socket.on('getUsers', (data) => {
                            that.users = data;
                        });
                        that.socket.on('changeItem', (data) => {
                            console.log(data);
                            that.users[data.name] = data.item;
                        })
                    });
                    setInterval(() => {
                        if (that.join) {
                            that.socket.emit('changeItem', {
                                isfilp: that.isfilp,
                                stateIndex: that.stateIndex,
                                left: that.left,
                                bottom: 0,
                                chatIng: this.chatIng,
                                chatText: this.chatText
                            });
                        }
                    }, 16.6);
                },
                methods: {
                    addUser() {
                        var that = this;
                        this.socket.emit('addUsers', {
                            userName: this.userName,
                            userOpt: {
                                isfilp: that.isfilp,
                                stateIndex: that.stateIndex,
                                left: that.left,
                                bottom: 0,
                                chatIng: this.chatIng,
                                chatText: this.chatText
                            }
                        });
                        this.socket.on('addUsersState', (data) => {
                            if (data.code === 200) {
                                this.join = true;
                                this.isIn = true;
                                document.all('jiaodian').focus();
                            } else {
                                alert(data.msg)
                            }
                        })
                    },
                    chatEmit() {
                        let that = this;
                        this.chatText = this.inputText;
                        this.inputText = '';
                        this.chatIng = true;
                        this.getFocus('jiaodian');
                        setTimeout(function() {
                            that.chatIng = false;
                            that.chatText = '';
                        }, 5000);
                    },
                    changeType(speed, type) {
                        this.speed = speed;
                        this.stateType = type;
                        if (type === 1) {
                            this.rule = [3, 4, 5, 6];
                        } else if (type === 0) {
                            this.rule = [0, 1, 2, 1];
                        } else {
                            this.rule = [7];
                        }
                        this.roleAnimation();
                    },
                    stateClass(num) {
                        return 'state_' + num
                    },
                    roleAnimation() {
                        let playIndex = 0;
                        this.stateIndex = playIndex;
                        window.clearInterval(this.timer);
                        this.timer = setInterval(() => {
                            this.stateIndex = this.rule[playIndex];
                            if (playIndex == this.rule.length - 1) {
                                playIndex = 0;
                            } else {
                                playIndex++
                            }
                        }, this.speed)
                    },
                    changePos(direction) {
                        var that = this;
                        switch (direction) {
                            case 'left':
                                if (!this.keydown) {
                                    this.keydown = true;
                                    that.isfilp = true;
                                    this.changeType(200, 1);
                                }
                                this.left - 4 < 0 ? this.left = 0 : this.left = this.left - 4;
                                break;
                            case 'right':
                                if (!this.keydown) {
                                    this.keydown = true;
                                    that.isfilp = false;
                                    this.changeType(200, 1);
                                }
                                this.left + 4 > 800 - 63 ? this.left = 800 - 63 : this.left = this.left + 4;
                                break;
                            case 'down':
                                if (!this.keydown) {
                                    this.keydown = true;
                                    this.changeType(0, 2);
                                }
                                break;
                        }
                    },
                    stopMove() {
                        if (!this.join) {
                            alert('请先加入聊天室');
                            document.all('join').focus();
                            return false;
                        }
                        this.changeType(500, 0);
                        this.keydown = false;
                        console.log('aaa');
                    },
                    getFocus(id) {
                        document.all(id).focus();
                    }
                }
            })
        }
    </script>
</body>

</html>